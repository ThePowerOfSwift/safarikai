// Generated by CoffeeScript 1.11.1
(function() {
  var flatten, readDataFile;

  window.Dictionary = (function() {
    function Dictionary() {
      console.log("Create dictionary instance");
    }

    Dictionary.prototype.find = function(word, limit) {
      var i, idx, l, len, longest, ref, result, results, w;
      if (!this.dict) {
        return [];
      }
      this.cachedWord = {};
      longest = null;
      results = [];
      ref = (function() {
        var j, ref, results1;
        results1 = [];
        for (l = j = ref = word.length; ref <= 1 ? j <= 1 : j >= 1; l = ref <= 1 ? ++j : --j) {
          results1.push(word.substring(0, l));
        }
        return results1;
      })();
      for (i = 0, len = ref.length; i < len; i++) {
        w = ref[i];
        result = this.searchWord(w);
        if (result.length > 0) {
          longest || (longest = w);
        }
        results.push.apply(results, result);
      }
      return {
        results: (function() {
          var j, len1, results1;
          results1 = [];
          for (idx = j = 0, len1 = results.length; j < len1; idx = ++j) {
            result = results[idx];
            if (idx < limit) {
              results1.push(result);
            }
          }
          return results1;
        })(),
        match: longest
      };
    };

    Dictionary.prototype.pushWordToResults = function(results, word, matchedWord) {
      var i, item, len, parsed, pending, record, results1;
      if (matchedWord == null) {
        matchedWord = null;
      }
      if (!this.cachedWord[word]) {
        this.cachedWord[word] = true;
        if (record = this.dict.words[word]) {
          parsed = (function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = record.length; i < len; i++) {
              item = record[i];
              results1.push(this.parseResult(word, item));
            }
            return results1;
          }).call(this);
          results1 = [];
          for (i = 0, len = parsed.length; i < len; i++) {
            pending = parsed[i];
            if ((!matchedWord) || (pending.kana === matchedWord || pending.kanji === matchedWord)) {
              results1.push(results.push(pending));
            }
          }
          return results1;
        }
      }
    };

    Dictionary.prototype.searchWord = function(word) {
      var hiragana, i, index, indexes, j, k, len, len1, len2, results, variant, variants;
      results = [];
      variants = word.length > 1 ? Deinflector.deinflect(word) : [word];
      hiragana = Romaji.toHiragana(word).join("");
      if (hiragana.length > 0) {
        variants.push(hiragana);
      }
      for (i = 0, len = variants.length; i < len; i++) {
        variant = variants[i];
        this.pushWordToResults(results, variant);
      }
      for (j = 0, len1 = variants.length; j < len1; j++) {
        variant = variants[j];
        if (indexes = this.dict.indexes[variant]) {
          for (k = 0, len2 = indexes.length; k < len2; k++) {
            index = indexes[k];
            this.pushWordToResults(results, index, variant);
          }
        }
      }
      return results;
    };

    Dictionary.prototype.parseResult = function(kanji, result) {
      var kana, parts, translation;
      if (result[0] === "[") {
        parts = result.split(/[\[\]]/);
        kana = parts[1];
        translation = parts[2].substring(1);
      } else {
        kana = kanji;
        translation = result;
      }
      translation = translation.replace(/^\/\(\S+\) /, "");
      translation = translation.replace(/\(P\)\/$/, "");
      translation = translation.slice(0, -1).split("/").join("; ");
      return {
        kana: kana,
        kanji: kanji,
        translation: translation,
        romaji: Romaji.toRomaji(kana)
      };
    };

    Dictionary.prototype.load = function() {
      return readDataFile("data.js", (function(_this) {
        return function(data) {
          eval(data);
          return _this.dict = loadedDict;
        };
      })(this));
    };

    Dictionary.prototype.unload = function() {
      return this.dict = null;
    };

    return Dictionary;

  })();

  flatten = function(array) {
    var element, flattened, i, len;
    flattened = [];
    for (i = 0, len = array.length; i < len; i++) {
      element = array[i];
      if (element instanceof Array) {
        flattened.push.apply(flattened, flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  readDataFile = function(file, success) {
    return success("var loadedDict = {}");
  };

}).call(this);
